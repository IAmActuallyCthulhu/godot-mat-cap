[gd_resource type="VisualShader" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=1]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 3

[sub_resource type="VisualShaderNodeVec3Constant" id=4]
constant = Vector3( 0.5, 0.5, 0.5 )

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[sub_resource type="VisualShaderNodeVectorDecompose" id=6]

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeTextureUniform" id=9]
uniform_name = "mat_capture"

[sub_resource type="VisualShaderNodeVectorCompose" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 6

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorDecompose" id=13]

[resource]
code = "shader_type spatial;
uniform sampler2D mat_capture;



void vertex() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = NORMAL;

// VectorDecompose:4
	float n_out4p0;
	float n_out4p1;
	float n_out4p2;
	n_out4p0 = n_out3p0.x;
	n_out4p1 = n_out3p0.y;
	n_out4p2 = n_out3p0.z;

// ScalarOp:13
	float n_in13p1 = 0.00000;
	float n_out13p0;
	n_out13p0 = max( n_out4p2 , n_in13p1 );

// VectorCompose:12
	vec3 n_out12p0;
	n_out12p0 = vec3( n_out4p0 , n_out4p1 , n_out13p0 );

// Output:0
	NORMAL = n_out12p0;

}

void fragment() {
// Vector:4
	vec3 n_out4p0;
	n_out4p0 = vec3(0.500000,0.500000,0.500000);

// Input:2
	vec3 n_out2p0;
	n_out2p0 = NORMAL;

// VectorOp:3
	vec3 n_in3p1 = vec3(2.00000,2.00000,2.00000);
	vec3 n_out3p0;
	n_out3p0 = n_out2p0 / n_in3p1;

// VectorOp:5
	vec3 n_out5p0;
	n_out5p0 = n_out4p0 + n_out3p0;

// VectorDecompose:6
	float n_out6p0;
	float n_out6p1;
	float n_out6p2;
	n_out6p0 = n_out5p0.x;
	n_out6p1 = n_out5p0.y;
	n_out6p2 = n_out5p0.z;

// ScalarOp:7
	float n_in7p1 = -1.00000;
	float n_out7p0;
	n_out7p0 = n_out6p1 * n_in7p1;

// ScalarOp:8
	float n_in8p1 = 1.00000;
	float n_out8p0;
	n_out8p0 = n_out7p0 + n_in8p1;

// VectorCompose:10
	float n_in10p2 = 1.00000;
	vec3 n_out10p0;
	n_out10p0 = vec3( n_out6p0 , n_out8p0 , n_in10p2 );

// TextureUniform:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		vec4 n_tex_read = texture( mat_capture , n_out10p0.xy );
		n_out9p0 = n_tex_read.rgb;
		n_out9p1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -6, -46.4301 )
nodes/vertex/0/position = Vector2( 960, 240 )
nodes/vertex/3/node = SubResource( 12 )
nodes/vertex/3/position = Vector2( 100, 240 )
nodes/vertex/4/node = SubResource( 13 )
nodes/vertex/4/position = Vector2( 260, 240 )
nodes/vertex/12/node = SubResource( 10 )
nodes/vertex/12/position = Vector2( 760, 240 )
nodes/vertex/13/node = SubResource( 11 )
nodes/vertex/13/position = Vector2( 480, 320 )
nodes/vertex/connections = PoolIntArray( 3, 0, 4, 0, 4, 1, 12, 1, 4, 0, 12, 0, 4, 2, 13, 0, 13, 0, 12, 2, 12, 0, 0, 1 )
nodes/fragment/0/position = Vector2( 1620, -180 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 80, 140 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 260, 120 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 240, 20 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 440, 100 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 620, 100 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 840, 160 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( 1020, 160 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( 1400, 20 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 1200, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 5, 0, 3, 0, 5, 1, 5, 0, 6, 0, 6, 1, 7, 0, 7, 0, 8, 0, 6, 0, 10, 0, 8, 0, 10, 1, 10, 0, 9, 0, 9, 0, 0, 0 )
